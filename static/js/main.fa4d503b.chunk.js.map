{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","Scroll","props","style","overflowY","border","height","children","SearchBox","searchField","searchChange","type","placeholder","onChange","ErrorBoundry","state","hasError","error","info","this","setState","hadError","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filterRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4OAiBeA,G,MAdF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACrB,OACI,kBAAC,WAAD,KACA,yBAAKC,UAAU,uDACX,qCAAKC,IAAI,GAAGC,IAAI,UAAhB,oCAAqDH,EAArD,cACA,6BACI,4BAAMF,GACN,+BAAMC,QCYXK,EAnBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OACI,kBAAC,WAAD,KAEQA,EAAOC,KAAK,SAACC,EAAMC,GACf,OACA,kBAAC,EAAD,CACIC,IAAKD,EACLR,GAAKK,EAAOG,GAAGR,GACfF,KAAOO,EAAOG,GAAGV,KACjBC,MAAQM,EAAOG,GAAGT,aCF3BW,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEJ,EAAMK,WCUJC,EAdG,SAAC,GAA8B,EAA7BC,YAA8B,IAAjBC,EAAgB,EAAhBA,aAC7B,OACI,yBAAKlB,UAAU,OACX,2BACAA,UAAU,mCACVmB,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCaPI,E,YAnBX,WAAYZ,GAAO,IAAD,8BACd,4CAAMA,KACDa,MAAQ,CACTC,UAAU,GAHA,E,+EAOAC,EAAOC,GACrBC,KAAKC,SAAS,CAACC,UAAU,M,+BAIzB,OAAGF,KAAKJ,MAAME,MACH,uDAEJE,KAAKjB,MAAMK,a,GAhBCe,aCyDZC,G,kBAlDX,aAAc,IAAD,8BACT,+CAoBJC,eAAiB,SAACC,GAEd,EAAKL,SAAS,CAACM,YAAaD,EAAME,OAAOC,SArBzC,EAAKb,MAAQ,CACTnB,OAAQ,GACR8B,YAAa,IAJR,E,iFAaO,IAAD,OACfG,MAAM,8CACDC,MAAM,SAAAC,GAAa,OAAOA,EAASC,UACnCF,MAAM,SAAAG,GAAU,EAAKb,SAAS,CAACxB,OAAQqC,S,+BAUvC,IAAD,EAC4Bd,KAAKJ,MAA7BnB,EADJ,EACIA,OAAQ8B,EADZ,EACYA,YACVQ,EAAetC,EAAOuC,QAAO,SAAAC,GAC/B,OAAOA,EAAM/C,KAAKgD,cAAcC,SAASZ,EAAYW,kBAGzD,OAAQzC,EAAO2C,OAGP,yBAAK/C,UAAU,MACX,0CACA,kBAAC,EAAD,CAAWkB,aAAcS,KAAKK,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU5B,OAAQsC,OAPlC,wBAAI1C,UAAU,MAAd,kB,GAlCM8B,cCIEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAE,EAAF,MAAUC,SAASC,eAAe,SD2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.fa4d503b.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport 'tachyons';\n\nconst Card = ({ name, email, id }) => {\n        return(\n            <Fragment>\n            <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n                <img src=\"\" alt=\"robots\" src={`http://robohash.org/${id}?200x200`}/>\n                <div>\n                    <h2>{ name }</h2>\n                    <p> { email }</p>\n                </div>\n            </div>\n            </Fragment>\n        );\n}\n\nexport default Card;","import React, { Fragment } from 'react';\nimport Card from './Card.js';\n\nconst CardList = ({robots}) => {\n    return (\n        <Fragment>\n            {\n                robots.map( (user, i) => {\n                    return (\n                    <Card \n                        key={i} \n                        id={ robots[i].id } \n                        name={ robots[i].name } \n                        email={ robots[i].email }\n                    />\n                    )\n                })\n            }\n        </Fragment>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\n// It's a Wrap Components, it can use children\nconst Scroll = (props) => { \n    return (\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","import React from 'react';\n\nconst SearchBox = ({searchField, searchChange})=>{\n    return (\n        <div className=\"pa2\">\n            <input\n            className='pa3 ba b--green bg-lightest-blue'\n            type='search' \n            placeholder='search robots'\n            onChange={searchChange}\n            />\n        </div>\n    )\n}\n\n\nexport default SearchBox;","import React, { Component }from 'react';\n\nclass ErrorBoundry extends Component { \n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info){\n        this.setState({hadError: true});\n    }\n\n    render (){\n        if(this.state.error) {\n            return <h1>Ooops. This is not good</h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport Scroll from '../components/Scroll';\nimport SearchBox from '../components/SearchBox';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\n\n\nclass App extends Component {\n    constructor(){\n        super();\n        this.state = {\n            robots: [],\n            searchfield: '',\n        }\n    }\n    // Built in REACT: Lifecycle methods\n    // Mounting Order\n    // 1.constructor()\n    // 2.componentWillMount()\n    // 3.render()\n    // 4.componentDidMount()\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then( response => {return response.json();})\n            .then( users => {this.setState({robots: users});})\n    };\n\n    // Everytime you use your own methods components use this syntax\n    // functionName = () => {}    \n    onSearchChange = (event) => {\n        // Allows changes on state\n        this.setState({searchfield: event.target.value});\n    }\n\n    render(){\n        const { robots, searchfield } = this.state;\n        const filterRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n        });\n\n        return !robots.length ? \n            <h1 className=\"tc\">loading...</h1> :\n            (\n                <div className=\"tc\">\n                    <h1>RobotArena</h1>\n                    <SearchBox searchChange={this.onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundry>\n                            <CardList robots={filterRobots}/>\n                        </ErrorBoundry>\n                    </Scroll>\n                </div>\n            )\n\n    }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App.js';\nimport * as serviceWorker from './serviceWorker';\n// Destructive because is not exports default\n\n\nReactDOM.render(< App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}